/**
 * Course: IT351 - Advance Java Programming
 * Filename:ClientGui.java
 * Module: Client Application
 * Created: 08/19/2016
 * Modified:08/19/2016
 * 
 * Purpose: This client application will display to the user a window that will have two buttons. One button will be for requesting the customer information
 * while the other button will display the product information. The client, dpending on the button pressed, will communicate its wishes to the server
 * application that is sitting and waiting to process requests.
 * Modification:
 * 
 */
package IT351Ip1;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Duane Osburn
 */
public class ClientGui extends javax.swing.JFrame {

    /**
     * This creates the window that will be displayed to the user
     */
    public ClientGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        custButton = new javax.swing.JButton();
        prodButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server Displayer");

        custButton.setText("Customer");
        custButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custButtonActionPerformed(evt);
            }
        });

        prodButton.setText("Product");
        prodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodButtonActionPerformed(evt);
            }
        });

        outputArea.setColumns(20);
        outputArea.setRows(5);
        jScrollPane1.setViewportView(outputArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(custButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                .addComponent(prodButton)
                .addGap(122, 122, 122))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(custButton)
                    .addComponent(prodButton))
                .addGap(114, 114, 114))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//
//This method will control what happens when the customer button is selected
    private void custButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custButtonActionPerformed
        //Recieve a list of customer objects from the server
        List<Customer> cust = (List<Customer>) getDataFromServer(DataRequest.CUSTOMER);
        //Clear the text area on the window
        outputArea.setText(" ");
        //Loop through the list and display all of the objects using the Class toString            
        for (Customer customer: cust){
            outputArea.append(customer.toString());
            outputArea.append("\n");
        }//End For
    }//GEN-LAST:event_custButtonActionPerformed
//This method will control what happends when the product button is selected
    private void prodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodButtonActionPerformed
        //Receieve a list of product objects from the server
        List<Product> prod = (List<Product>) getDataFromServer(DataRequest.PRODUCT);
        //Clear the text area on the window
        outputArea.setText(" ");
        //Loop throough the list and display all of the objects using the class toString           
        for (Product product: prod){
            outputArea.append(product.toString());
            outputArea.append("\n");
        }//End For
    }//GEN-LAST:event_prodButtonActionPerformed
//This method will contact the server and get the requested information
    private List getDataFromServer(int dataType){
        try {
            //Make a connection with the server
            Socket socket = new Socket("localhost", 3718);
            //Create instances for the I/O
            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
            //Create an instance of the communication class and set the desired information switch
            DataRequest request = new DataRequest();
            request.setDataType(dataType);
            //Send the request to the server
            out.writeObject(request);
            out.flush();
            //Retrieve the information passed to the client from the server
            List values = (List) in.readObject();
            //Close the connection
            socket.close();
            //Return the list of objects
            return values;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to contact server or other proble");
            Logger.getLogger(ClientGui.class.getName()).log(Level.SEVERE, null, ex);
            return new ArrayList();
        }//End Try Catch
    }
 //   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton custButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton prodButton;
    // End of variables declaration//GEN-END:variables
}
